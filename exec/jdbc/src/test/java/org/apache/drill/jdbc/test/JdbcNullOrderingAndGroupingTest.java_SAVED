/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.drill.jdbc.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;

import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.google.common.base.Function;

public class JdbcNullOrderingAndGroupingTest extends JdbcTestQueryBase {
  static final org.slf4j.Logger logger = 
      org.slf4j.LoggerFactory.getLogger(JdbcNullOrderingAndGroupingTest.class);

  // TODO(f:dbarclay):TODO1062: Fix: HACK: Disable Jetty status(?) server so unit tests
  // run (without Maven setup).
  @BeforeClass
  public static void setUpClass() {
    System.setProperty( "drill.exec.http.enabled", "false" );
  }

  @Test
  public void testOrderByDefaultWithNullsLast() throws Exception {
    JdbcAssert.withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 NULLS LAST" )
        .returns( "EXPR$0=Chocolate\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=null" );
  }

  @Test
  public void testOrderByDefaultWithNullsFirst() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 NULLS FIRST" )
        .returns( "EXPR$0=null\n" +
                  "EXPR$0=Chocolate\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" );
   }

  @Test
  public void testOrderByDefaultWithNullsDefaultLast() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1" )
        .returns( "EXPR$0=Chocolate\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=null" );
  }

  @Test
  public void testOrderByAscendingWithNullsLast() throws Exception {
     JdbcAssert
         .withNoDefaultSchema()
         .sql( "SELECT tbl.topping[3].type \n" +
               "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
               "ORDER BY 1 ASC NULLS LAST" )
         .returns( "EXPR$0=Chocolate\n" +
                   "EXPR$0=Maple\n" +
                   "EXPR$0=Powdered Sugar\n" +
                   "EXPR$0=Powdered Sugar\n" +
                   "EXPR$0=null"
                   );
  }

  @Test
  public void testOrderByAscendingWithNullsFirst() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 ASC NULLS FIRST" )
        .returns( "EXPR$0=null\n" +
                  "EXPR$0=Chocolate\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" );
  }

  @Test
  public void testOrderByAscendingWithNullsDefaultLast() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 ASC" )
        .returns( "EXPR$0=Chocolate\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=null" );
  }

  @Test
  public void testOrderByDescendingWithNullsLast() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 DESC NULLS LAST" )
        .returns( "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Chocolate\n" +
                  "EXPR$0=null" );
  }

  @Test
  public void testOrderByDescendingWithNullsFirst() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 DESC NULLS FIRST" )
        .returns( "EXPR$0=null\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Chocolate" );
  }

  @Test
  public void testOrderByDescendingWithNullsDefaultFirst() throws Exception {
    JdbcAssert
        .withNoDefaultSchema()
        .sql( "SELECT tbl.topping[3].type \n" +
              "FROM cp.`null_ordering_and_grouping_data.json` AS tbl \n" +
              "ORDER BY 1 DESC" )
        .returns( "EXPR$0=null\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Powdered Sugar\n" +
                  "EXPR$0=Maple\n" +
                  "EXPR$0=Chocolate" );
  }


}
